#version 430 core
layout(local_size_x = 1) in; // Set the local workgroup size to 1


layout(std430, binding = 0) buffer InstancePositionBuffer {
    vec4 instancePosition[]; // Buffer to store instance positions
};

layout(std430, binding = 1) buffer InstanceVelocityBuffer {
    vec2 instanceVelocity[]; // Buffer to store instance velocities
};


/*        _computeShader.setUniform1v("u_AlignmentWeight", alignmentWeight);
        _computeShader.setUniform1v("u_CohesionWeight", cohesionWeight);
        _computeShader.setUniform1v("u_SeparationWeight", separationWeight);
        _computeShader.setUniformV2f( "u_Bounds", Bounds );
*/

uniform float u_AlignmentWeight;
uniform float u_CohesionWeight;
uniform float u_SeparationWeight;
uniform vec4 u_Bounds;



float randomVec2(vec2 st) {
    st = fract(st * vec2(5.3983, 5.4427));
    st += dot(st.yx, st.xy + vec2(21.5351, 14.3137));
    return -1.0 + 2.0 * fract(st.x * st.y * 0.5821);
}

void main() {
    // Calculate global invocation ID
    uint index = gl_GlobalInvocationID.x;
    // Update instance velocity
    //boids simulation
    vec2 alignment = vec2(0.0);
    vec2 cohesion = vec2(0.0);
    vec2 separation = vec2(0.0);
    vec2 position = instancePosition[index].xy;
    float rotation = instancePosition[index].z;
    vec2 velocity = instanceVelocity[index];


    float theta =  randomVec2(position)*0.1; // Adjust this value to control the rotation speed

    // Calculate the rotation matrix
    mat2 rotationMatrix = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));

    // Apply the rotation matrix to the velocity vector
    velocity = rotationMatrix * velocity;
    //che bounds
    
    // Update instance position
    position += velocity;
    // Update instance rotation
   
 
    if(position.x < -u_Bounds.x || position.x > u_Bounds.z){
        velocity.x = -velocity.x;
        position.x = clamp(position.x, -u_Bounds.x, u_Bounds.z);
    }
    if(position.y < -u_Bounds.y || position.y > u_Bounds.w){
        velocity.y = -velocity.y;
        position.y = clamp(position.y, -u_Bounds.y, u_Bounds.w);
    }
    rotation = atan(velocity.x, velocity.y);
    
    instancePosition[index] = vec4(position, rotation,0);
    instanceVelocity[index] = velocity;
   // instancePosition[index] = instancePosition[index];
  
}